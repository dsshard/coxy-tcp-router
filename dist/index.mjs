import p from'crypto';import {createServer,Socket,connect}from'net';import C from'events';var k="aes-256-gcm",l=12,v=16;function w(o){return p.createHash("sha256").update(o).digest()}function T(o,e){let t=w(e),r=p.randomBytes(l),n=p.createCipheriv(k,t,r),c=Buffer.concat([n.update(o,"utf8"),n.final()]),i=n.getAuthTag();return Buffer.concat([r,c,i]).toString("base64")}function S(o,e){let t=Buffer.from(o,"base64"),r=w(e),n=t.subarray(0,l),c=t.subarray(t.length-v),i=t.subarray(l,t.length-v),s=p.createDecipheriv(k,r,n);return s.setAuthTag(c),Buffer.concat([s.update(i),s.final()]).toString("utf8")}var h=class extends C{encrypt(e,t){return this.getSecret(t)?T(e,this.getSecret(t)):e}decrypt(e,t){return this.getSecret(t)?JSON.parse(S(e,this.getSecret(t))):JSON.parse(e)}};function u(){let o,e,t=new Promise((r,n)=>{o=r,e=n;});return Object.assign(t,{resolve:o,reject:e})}function x(...o){let e=[...o];return {push:(...n)=>e.push(...n),execute:async n=>{let c=-1,i=async s=>{if(s===c)throw new Error("next() called multiple times");c=s;let a=e[s];a&&await a(n,()=>i(s+1));};if(await i(0),n.body===void 0)throw new Error("Pipeline did not set ctx.body");return {body:n.body}}}}var m=class extends h{server;opts;routers=new Map;active=new Set;constructor(e){super(),this.opts=e,this.server=createServer(t=>this.handleSocket(t));}listen(e){let t=u();return this.server.listen(this.opts.port,this.opts.host,()=>{this.emit("listening"),t.resolve(),e&&e();}),t}getSecret(e){return `${this.opts.secret}${e?.secret??""}`}handleSocket(e){let t=(e.remoteAddress??"").replace(/^::ffff:/,"");if(this.opts.whitelist&&!this.opts.whitelist.includes(t))return this.emit("error:whitelist",e),e.destroy();if(this.opts.maxConnections&&this.active.size>=this.opts.maxConnections)return this.emit("error:maxConnections",e),e.destroy();this.active.add(e),e.setKeepAlive(true),e._buf=Buffer.alloc(0),e.on("close",()=>{this.active.delete(e),this.emit("close",e),e.removeAllListeners();}),this.handshake(e);}close(){let e=u();this.server.once("close",()=>{setTimeout(e.resolve);}),this.server.close();for(let t of this.active)t.destroy();return e}deriveKey(e){return p.createHmac("sha256",this.opts.secret||"").update(e).digest("hex")}handshake(e){let t=p.createECDH("prime256v1");t.generateKeys();let r=n=>{e.off("data",r);let c=n.toString().trimEnd(),i;try{i=JSON.parse(c);}catch{return e.destroy()}let s=t.computeSecret(Buffer.from(i.pub,"hex"));e.secret=this.deriveKey(s),e.clientName=i.name,e.write(`${JSON.stringify({pub:t.getPublicKey("hex")})}
`),this.emit("connect",e,i.name),e.on("data",a=>this.readFrames(e,a));};e.on("data",r);}readFrames(e,t){for(e._buf=Buffer.concat([e._buf,t]);e._buf.length>=4;){let r=e._buf.readUInt32BE(0);if(e._buf.length<4+r)break;let n=e._buf.subarray(4,4+r).toString("utf8");e._buf=e._buf.subarray(4+r),this.handleData(n,e);}}async handleData(e,t){let r;try{r=this.decrypt(e,t);}catch{return}let n=r.rout?.toLowerCase(),c=this.routers.get(n),i={uuid:r.uuid};try{if(!c)throw new Error(`Route ${n} not found`);let{body:f}=await c.execute({request:r.body,rout:n});i.body=f;}catch(f){i.error=f.message;}let s=this.encrypt(JSON.stringify(i),t),a=Buffer.from(s,"utf8"),d=Buffer.allocUnsafe(4+a.length);d.writeUInt32BE(a.length,0),a.copy(d,4),t.write(d);}use(e,...t){let r=x();r.push(...t),this.routers.set(e.trim().toLowerCase(),r);}};function y(){return new Promise(o=>{let e=connect({host:"1.1.1.1",port:53,timeout:3e3},()=>{e.destroy(),o(true);});e.on("connect",()=>{e.destroy(),o(true);}),e.on("error",()=>{e.destroy(),o(false);}),e.on("timeout",()=>{e.destroy(),o(false);});})}var b=class extends h{getSecret(){return `${this.opt.secret}${this.secret}`}sock;opt;ecdh=p.createECDH("prime256v1");secret="";buf=Buffer.alloc(0);pending={};mClosed=false;rTimer=null;iTimer=null;connected=u();closed=true;constructor(e){super(),this.opt=e;}spawn(){this.sock=new Socket,this.buf=Buffer.alloc(0),this.sock.on("error",e=>{if(e.code==="ECONNRESET"){this.onClose();return}this.emit("error",e);}),this.sock.on("close",()=>this.onClose()),this.sock.once("connect",()=>this.sendHandshake()),this.sock.on("data",e=>this.onData(e));}sendHandshake(){this.ecdh.generateKeys();let e={pub:this.ecdh.getPublicKey("hex"),name:this.opt.name};this.sock.write(JSON.stringify(e));}onData(e){if(!this.secret)return this.onHandshake(e);for(this.buf=Buffer.concat([this.buf,e]);this.buf.length>=4;){let t=this.buf.readUInt32BE(0);if(this.buf.length<4+t)break;let r=this.buf.subarray(4,4+t).toString("utf8");if(this.buf=this.buf.subarray(4+t),this.closed)return;this.onMessage(r);}}onHandshake(e){let t=e.toString().trimEnd(),r;try{r=JSON.parse(t);}catch{this.sock.destroy();return}let n=this.ecdh.computeSecret(Buffer.from(r.pub,"hex"));this.secret=p.createHmac("sha256",this.opt.secret||"").update(n).digest("hex"),this.connected.resolve(true),this.emit("connect");}onMessage(e){let t;try{t=this.decrypt(e);}catch{return}let r=this.pending[t.uuid];r&&(t.error?r.defer.reject(new Error(t.error)):r.defer.resolve(t.body),delete this.pending[t.uuid]);}async connect(){if(!this.closed)return this.connected;if(this.closed=false,this.mClosed=false,this.connected=u(),!await y()){this.onClose();return}return this.spawn(),this.sock.connect(this.opt.port,this.opt.host),await this.connected,this.opt.keepAlive&&this.sock.setKeepAlive(true,1e3),clearInterval(this.iTimer),this.iTimer=setInterval(()=>{y().then(t=>{this.emit("internet",t),t||this.onClose();});},5e3),true}onClose(){clearInterval(this.iTimer),this.closed=true,this.secret="",Object.keys(this.pending).forEach(e=>{this.pending[e].defer.reject(new Error("Client closed")),delete this.pending[e];}),!this.rTimer&&(this.mClosed||!this.opt.autoReconnect||(this.emit("close"),this.rTimer=setTimeout(()=>{this.rTimer=null,this.connect();},this.opt.timeoutReconnect)));}close(){this.mClosed=true,this.rTimer&&(clearTimeout(this.rTimer),this.rTimer=null),this.sock&&(this.sock.removeAllListeners(),this.sock.destroy()),this.closed=true;}async send(e="",t={}){this.closed&&!this.mClosed&&await this.connect();let r=p.randomUUID(),n={uuid:r,rout:e,body:t},c=this.encrypt(JSON.stringify(n)),i=u();this.pending[r]={ts:Date.now(),defer:i};let s=Buffer.from(c,"utf8"),a=Buffer.allocUnsafe(4+s.length);return a.writeUInt32BE(s.length,0),s.copy(a,4),this.sock.write(a),i}};export{b as TcpClient,m as TcpServer};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map